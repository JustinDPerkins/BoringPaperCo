name: CI Pipeline - Build and Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UI_CONTAINER_NAME: "ui"
  SDK_CONTAINER_NAME: "sdk"
  CONTAINERXDR_CONTAINER_NAME: "containerxdr"
  AICHAT_CONTAINER_NAME: "aichat"
  RELEASE: "latest"

permissions:
  contents: read

jobs:
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ UI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  UI:
    runs-on: ubuntu-latest
    name: UI Build and Scan
    steps:
      - uses: actions/checkout@v4

      - name: Build the Docker image
        run: docker build -t ${{ env.UI_CONTAINER_NAME }}:${{ env.RELEASE }} ui/

      - name: Vision One Container Security Scan
        run: |
          set -e
          cd scripts && chmod +x tmas_install.sh && ./tmas_install.sh
          export TMAS_API_KEY='${{ secrets.V1_API_KEY }}'
          IMAGE_TAR="${UI_CONTAINER_NAME}_${RELEASE}.tar"
          docker save "${UI_CONTAINER_NAME}:${RELEASE}" > "$IMAGE_TAR"
          tmas scan "docker-archive:$IMAGE_TAR" -VMS --saveSBOM > result.json
          mv SBOM_* SBOM.json
          echo "TMAS Scan Result"
          cat result.json

      - name: 'Upload Scan Result Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-result-${{ env.UI_CONTAINER_NAME }}
          path: scripts/result.json
          retention-days: 30

      - name: 'Upload SBOM Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.UI_CONTAINER_NAME }}
          path: scripts/SBOM.json
          retention-days: 30

      - name: 'Upload Build Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: ui-container-${{ env.RELEASE }}
          path: ${{ env.UI_CONTAINER_NAME }}_${{ env.RELEASE }}.tar
          retention-days: 7

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ SDK â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  SDK:
    runs-on: ubuntu-latest
    name: SDK Build and Scan
    steps:
      - uses: actions/checkout@v4

      - name: Build the Docker image
        run: docker build -t ${{ env.SDK_CONTAINER_NAME }}:${{ env.RELEASE }} sdk/

      - name: Vision One Container Security Scan
        run: |
          set -e
          cd scripts && chmod +x tmas_install.sh && ./tmas_install.sh
          export TMAS_API_KEY='${{ secrets.V1_API_KEY }}'
          IMAGE_TAR="${SDK_CONTAINER_NAME}_${RELEASE}.tar"
          docker save "${SDK_CONTAINER_NAME}:${RELEASE}" > "$IMAGE_TAR"
          tmas scan "docker-archive:$IMAGE_TAR" -VMS --saveSBOM > result.json
          mv SBOM_* SBOM.json
          echo "TMAS Scan Result"
          cat result.json

      - name: 'Upload Scan Result Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-result-${{ env.SDK_CONTAINER_NAME }}
          path: scripts/result.json
          retention-days: 30

      - name: 'Upload SBOM Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.SDK_CONTAINER_NAME }}
          path: scripts/SBOM.json
          retention-days: 30

      - name: 'Upload Build Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: sdk-container-${{ env.RELEASE }}
          path: ${{ env.SDK_CONTAINER_NAME }}_${{ env.RELEASE }}.tar
          retention-days: 7

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ContainerXDR â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  ContainerXDR:
    runs-on: ubuntu-latest
    name: ContainerXDR Build and Scan
    steps:
      - uses: actions/checkout@v4

      - name: Build the Docker image
        run: docker build -t ${{ env.CONTAINERXDR_CONTAINER_NAME }}:${{ env.RELEASE }} containerxdr/

      - name: Vision One Container Security Scan
        run: |
          set -e
          cd scripts && chmod +x tmas_install.sh && ./tmas_install.sh
          export TMAS_API_KEY='${{ secrets.V1_API_KEY }}'
          IMAGE_TAR="${CONTAINERXDR_CONTAINER_NAME}_${RELEASE}.tar"
          docker save "${CONTAINERXDR_CONTAINER_NAME}:${RELEASE}" > "$IMAGE_TAR"
          tmas scan "docker-archive:$IMAGE_TAR" -VMS --saveSBOM > result.json
          mv SBOM_* SBOM.json
          echo "TMAS Scan Result"
          cat result.json

      - name: 'Upload Scan Result Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-result-${{ env.CONTAINERXDR_CONTAINER_NAME }}
          path: scripts/result.json
          retention-days: 30

      - name: 'Upload SBOM Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.CONTAINERXDR_CONTAINER_NAME }}
          path: scripts/SBOM.json
          retention-days: 30

      - name: 'Upload Build Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: containerxdr-container-${{ env.RELEASE }}
          path: ${{ env.CONTAINERXDR_CONTAINER_NAME }}_${{ env.RELEASE }}.tar
          retention-days: 7

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ AI Chat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  AIChat:
    runs-on: ubuntu-latest
    name: AI Chat Build and Scan
    steps:
      - uses: actions/checkout@v4

      - name: Build the Docker image
        run: docker build -t ${{ env.AICHAT_CONTAINER_NAME }}:${{ env.RELEASE }} aichat/

      - name: Vision One Container Security Scan
        run: |
          set -e
          cd scripts && chmod +x tmas_install.sh && ./tmas_install.sh
          export TMAS_API_KEY='${{ secrets.V1_API_KEY }}'
          IMAGE_TAR="${AICHAT_CONTAINER_NAME}_${RELEASE}.tar"
          docker save "${AICHAT_CONTAINER_NAME}:${RELEASE}" > "$IMAGE_TAR"
          tmas scan "docker-archive:$IMAGE_TAR" -VMS --saveSBOM > result.json
          mv SBOM_* SBOM.json
          echo "TMAS Scan Result"
          cat result.json

      - name: 'Upload Scan Result Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-result-${{ env.AICHAT_CONTAINER_NAME }}
          path: scripts/result.json
          retention-days: 30

      - name: 'Upload SBOM Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.AICHAT_CONTAINER_NAME }}
          path: scripts/SBOM.json
          retention-days: 30

      - name: 'Upload Build Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: aichat-container-${{ env.RELEASE }}
          path: ${{ env.AICHAT_CONTAINER_NAME }}_${{ env.RELEASE }}.tar
          retention-days: 7

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ UNIT TESTS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  UnitTests:
    name: Unit Tests
    needs: [UI, SDK, ContainerXDR, AIChat]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Test SDK Service
        run: |
          echo "ðŸ§ª Testing SDK service..."
          cd sdk
          go mod tidy
          go test -v ./...
      
      - name: Test AI Chat Service
        run: |
          echo "ðŸ§ª Testing AI Chat service..."
          cd aichat
          go mod tidy
          go test -v ./...
      
      - name: Test ContainerXDR Service
        run: |
          echo "ðŸ§ª Testing ContainerXDR service..."
          cd containerxdr
          go mod tidy
          go test -v ./...
      
      - name: Test UI Dependencies
        run: |
          echo "ðŸ§ª Testing UI dependencies..."
          cd ui
          npm ci
          npm run test --if-present

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ SECURITY SUMMARY â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  SecuritySummary:
    name: Security Summary
    needs: [UI, SDK, ContainerXDR, AIChat]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Security Report
        run: |
          echo "ðŸ”’ Security Scan Summary for Boring Paper Co"
          echo "============================================="
          echo ""
          echo "âœ… All containers built successfully"
          echo "âœ… Vision One security scans completed"
          echo "âœ… SBOM artifacts generated"
          echo "âœ… Container artifacts uploaded"
          echo ""
          echo "ðŸ“‹ Next steps for production:"
          echo "   - Review Vision One scan results"
          echo "   - Address any high/critical vulnerabilities"
          echo "   - Review SBOM for license compliance"
          echo "   - Implement runtime security monitoring"
          echo ""
          echo "ðŸš€ Ready for deployment to cloud environments"
